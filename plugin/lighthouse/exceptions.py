from lighthouse.util.log import lmsg
from lighthouse.util.disassembler import disassembler

#------------------------------------------------------------------------------
# Exception Definitions
#------------------------------------------------------------------------------

class LighthouseError(Exception):
    """
    An error generated by Lighthouse.
    """
    def __init__(self, *args, **kwargs):
        super(LighthouseError, self).__init__(*args, **kwargs)

class CoverageParsingError(LighthouseError):
    """
    An error generated by the CoverageReader when all parsers fail.
    """
    def __init__(self, filepath, tracebacks):
        super(CoverageParsingError, self).__init__("Failed to parse coverage file")
        self.filepath = filepath
        self.tracebacks = tracebacks

    def __str__(self):
        return self.message + " '%s'" % self.filepath

class CoverageMissingError(LighthouseError):
    """
    An error generated when no data was extracted from a CoverageFile.
    """
    def __init__(self, filepath):
        super(CoverageMissingError, self).__init__("No coverage extracted from file")
        self.filepath = filepath

    def __str__(self):
        return self.message + " '%s'" % self.filepath

class CoverageMappingSuspicious(LighthouseError):
    """
    A warning generated when coverage data does not appear to match the database.
    """
    def __init__(self, coverage):
        super(CoverageMappingSuspicious, self).__init__("Coverage data appears badly mapped")
        self.coverage = coverage

    def __str__(self):
        return self.message + " for coverage '%s'" % self.coverage.name

class CoverageMappingAbsent(LighthouseError):
    """
    A warning generated when coverage data cannot be mapped.
    """
    def __init__(self, coverage):
        super(CoverageMappingAbsent, self).__init__("No coverage data could be mapped")
        self.coverage = coverage

    def __str__(self):
        return self.message + " for coverage '%s'" % self.coverage.name

#------------------------------------------------------------------------------
# UI Warnings
#------------------------------------------------------------------------------

def warn_errors(errors):
    """
    Warn the user of any encountered errors with a messagebox.
    """
    seen = []
    error_map = \
    {
        CoverageParsingError: warn_coverage_parsing,
        CoverageMissingError: warn_coverage_missing,
        CoverageMappingAbsent: warn_mapping_absent,
        CoverageMappingSuspicious: warn_mapping_suspicious,
    }

    for error in errors:
        error_type = type(error)

        lmsg(error)
        if error_type in seen:
            return

        try:
            error_map[error_type](error)
        except KeyError:
            raise NotImplementedError("UNKNOWN ERROR OCCURRED")

        seen.append(error_type)

def warn_coverage_parsing(error):
    """
    Display a warning for malformed/unreadable coverage files.
    """
    disassembler.warning(
        "Failed to parse one or more of the selected coverage files!\n\n"
        " Possible reasons:\n"
        " - You selected a file that was *not* a coverage file.\n"
        " - The selected coverage file is malformed or unreadable.\n"
        " - A suitable parser for the coverage file is not installed.\n\n"
        "Please see the disassembler console for more info..."
    )

def warn_coverage_missing(error):
    """
    Display a warning for missing coverage data.
    """
    disassembler.warning(
        "No usable coverage data was extracted from one of the selected files.\n\n"
        " Possible reasons:\n"
        " - You selected a coverage file for the wrong binary.\n"
        " - The name of the executable file used to generate this database\n"
        "    is different than the one you collected coverage against.\n"
        " - Your DBI failed to collect any coverage for this binary.\n\n"
        "Please see the disassembler console for more info..."
    )

def warn_mapping_absent(error):
    """
    Display a warning when no coverage data gets mapped.
    """
    disassembler.warning(
        "One or more of the loaded coverage files has no visibly mapped data.\n\n"
        " Possible reasons:\n"
        " - The loaded coverage data does not fall within defined functions.\n"
        " - You loaded an absolute address trace with a different imagebase.\n"
        " - The coverage file might be corrupt.\n\n"
        "Please see the disassembler console for more info..."
    )

def warn_mapping_suspicious(error):
    """
    Display a warning for badly mapped coverage data.
    """
    disassembler.warning(
        "One or more of the loaded coverage files appears to be badly mapped.\n\n"
        " Possible reasons:\n"
        " - You selected a coverage file that was collected against a\n"
        "    slightly different version of the binary.\n"
        " - You recorded an application with very abnormal control flow.\n"
        " - The coverage file might be corrupt.\n\n"
        "This means that any coverage displayed by Lighthouse is probably\n"
        "wrong, and should be used at your own discretion."
    )
